#! @SHELL@

# slaughter.sh: see --help option for details
#
###########
#
# Copyright © 2012, 2013 Rowan Thorpe
#
# This file is part of NOC-Kit.
#
# NOC-Kit is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# NOC-Kit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
###########
#
# For bug-reports please email: rowan *at* rowanthorpe _DOT_ com
# (obviously, fix the address with the appropriate symbols and no spaces).

# Config
__root_dir="@PKGLIBEXECDIR@"
. "${__root_dir}/nk_common.sh" || {
	echo "Failed sourcing nk_common.sh. Stopping.">&2
	exit 1
}

# Functions
__usage() {
	cat <<EOH
Usage: $__scriptbasenam [OPTIONS] proc [proc] ...

Try to "kill" a process gently, then not-so-gently, if necessary.

 * By default does "kill -s 15" three times with a sleep 1, then
   "kill -9" with a sleep 1.

 * For slaughter.sh each arg is the procnum, for slaughterall.sh each arg is
   the command name (without its invocation options or parameters)

 * If invoked as slaughterall (e.g. via symlink) acts analogously to killall
   vs. kill.

OPTIONS:
 --help|-h|--usage    : This help page.
 --version|-V|--about : Output information about this command.
 --source|-S          : Output this command as source code.
 --duration|-d        : Sleep duration between kill invocations.
 --repetitions|-r     : How many times to try try -15 before -9.
 --pattern|-p         : TODO: Explicitly set pattern of signals.
                        Overrides -r and -d. Follows 'sig,dur,...'
                        format (e.g. -p '15,1,15,2,15,2,9,1')
 --quiet|-q           : Don't output progress.
 --                   : End option processing.

 Copyright © 2012, 2013 Rowan Thorpe.
 Report bugs to rowan *at* rowanthorpe _DOT_ com
EOH
	__usage_footer
}

# Getopts
__duration=1
__repetitions=3
__verbose=1
while test -n "$1"; do
	case "$1" in
	--help|-h|--usage)
		__usage
		exit 0
		;;
	--version|-V|--about)
		__version
		exit 0
		;;
	--source|-S)
		__source
		exit 0
		;;
	--duration|-d)
		if test -z "$2" || printf "$2" | grep -q '[^0-9]' || test $2 -gt 255 || test $2 -lt 1; then
			__die -u "Invalid argument given for: duration."
		fi
		__duration="$2"
		shift 2
		continue
		;;
	--repetitions|-r)
		if test -z "$2" || printf "$2" | grep -q '[^0-9]' || test $2 -gt 255 || test $2 -lt 1; then
			__die -u "Invalid argument given for: repetitions."
		fi
		__repetitions="$2"
		shift 2
		continue
		;;
#	--pattern|-p)
#		TODO: Explicitly set pattern of signals.
#		      Overrides -r and -d. Follows 'sig,dur,...'
#		      format (e.g. -p '15,1,15,2,15,2,9,1')
#		;;
	--quiet|-q)
		__verbose=0
		shift
		continue
		;;
	--)
		shift
		break
		;;
	-*)
		__die -u "Unrecognised option specified."
		;;
	*)
		break
		;;
	esac
done

# Setup
__ret=0
__exit_val=0
__count=0
case "$__scriptbasename" in
slaughter|slaughter.sh)
	__kill_cmd() {
		kill -s "$@"
	}
	__check_cmd() {
		ps -p "$@"
	}
	__id_type=procid
	;;
slaughterall|slaughterall.sh)
	__kill_cmd() {
		killall -s "$@"
	}
	__check_cmd() {
		pgrep -c "^${@}\$"
	}
	__id_type=procname
	;;
*)
	__die -u "Command form $__scriptbasename unknown"
	;;
esac

# Main
for __arg in "$@"; do
	__check_cmd "$__arg" >/dev/null 2>&1 || {
		__warn "$__id_type $__arg doesn't exist"
		__exitval=1
		continue 1
	}
	while test $__count -lt $__repetitions; do
		__kill_cmd 15 "$__arg" >/dev/null 2>&1
		sleep $__duration
		__check_cmd "$__arg" >/dev/null 2>&1 || {
			__warn "Succeeded: __kill_cmd 15 \"$__arg\""
			continue 2
		}
		__warn "Failed: __kill_cmd 15 \"$__arg\""
		__count=$(( __count+1 ))
	done
	__kill_cmd 9 "$__arg" >/dev/null 2>&1
	sleep $__duration
	if __check_cmd "$__arg" >/dev/null 2>&1; then
		__die "Failed: __kill_cmd 9 \"$__arg\""
		__exitval=1
	else
		__warn "Succeeded: __kill_cmd 9 \"$__arg\""
	fi
done
exit $__exitval
