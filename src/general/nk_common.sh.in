#!@SHELL@

# nk_common.sh:
#
# NB: This aims to be POSIX.1-2008 compliant
#
###########
#
# Copyright Â© 2012, 2013, 2014 Rowan Thorpe
#
# This file is part of @PACKAGE_NAME@.
#
# @PACKAGE_NAME@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# @PACKAGE_NAME@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
###########
#
# Report bugs to @PACKAGE_BUGREPORT@

if test "x$1" = "x--nk-source"; then
    cat "$0"
    exit 0
fi
if test -z "$__common_sourced"; then
    __scriptname="$(readlink -q -e -n "$0")"
    __scriptbasename="$(printf %s "$__scriptname" | sed -n -e '$ { s:^.*/\([^/]*\)$:\1:; p }')"
    __scriptdirname="$(printf %s "$__scriptname" | sed -e '$ s:/[^/]*$::')"

    PACKAGE_VERSION="@PACKAGE_VERSION@"
    . "${__root_dir}/nk_logic_ops.sh" || { printf %s\\n "Failed to load nk_logic_ops.sh" >&2; return 1; }

    __usage_footer() {
        cat <<EOF
 Report bugs to @PACKAGE_BUGREPORT@

 Part of the @PACKAGE_NAME@ package.
 License AGPLv3+: GNU Affero GPL version 3 or later
 <http://gnu.org/licenses/agpl.html>.
 This is free software: you are free to change and redistribute it.
 There is NO WARRANTY, to the extent permitted by law.
EOF
    }
    __version() { printf "%s - noc-kit %s\n" "$__scriptbasename" "$PACKAGE_VERSION"; }
    __usage() { true; } # to override in each script
    __source() { cat "$0"; }
    __infof() {
        __or \
            '__off $__verbose' \
            '__lt $# 1' \
            '__not __has_nonempty "$@"' \
            'printf "$@" | sed -e "s/^/${__scriptbasename}: /"'
    }
    __info() {
        __or \
            '__off $__verbose' \
            '__lt $# 1' \
            '__not __has_nonempty "$@"' \
            '__infof '\''%s\n'\'' "$@" | sed -e "s/^/${__scriptbasename}: /"'
    }
    __warnf() { __infof "$@" >&2; }
    __warn() { __info "$@" >&2; }
    __sub_die() {
        __action="die"
        while __nempty "$1"; do
            case "$1" in
            -u) __usage >&2; shift;;
            -a) __action="$2"; shift 2;;
            --) shift; break;;
            -*) __warn "Internal error. Incorrect options passed to __sub_die()"; shift;;
            *) break;;
            esac
        done
        if __gt $# 0; then
            if test $# -gt 1; then
                shift
                printf \\n >&2
                case "$__action" in
                die) __verbose=1 __warn "$@" "Exiting.";;
                dief) __verbose=1 __warnf "$@"; __verbose=1 __warn "Exiting.";;
                esac
            fi
        fi
        __off __action
        exit $__retval
    }
    __dief() { __retval=$?; test $__retval -ne 0 || __retval=1; __sub_die -a dief -- "$@"; }
    __die() { __retval=$?; test $__retval -ne 0 || __retval=1; __sub_die -- "$@"; }
    __lambda() {
        test $# = 2 || { __warn "Syntax error: incorrect number of args to __lambda()."; return 1; }
        __lambda_vars="$(printf %s "$1" | tr "," " ")"
        __lambda_varsnum="$(printf %s "$__lambda_vars" | wc -w)"
        __lambda_cmd="$2"
        printf %s \
'__lambda_func() {
    test $# = "'"$__lambda_varsnum"'" || { __warnf '\''Syntax error: __lambda() requires "%s" arguments.'\'' "$__lambda_varsnum"; return 1; }
    __lambda_func_vars="'"$__lambda_vars"'"
    __lambda_func_cmd="'"$__lambda_cmd"'"
    __lambda_func_cnt=1
    for __lambda_func_var in $__lambda_func_vars
    do
        eval __lambda_func_replacement=\"\$$__lambda_func_cnt\"
        __lambda_func_cmd="$(printf %s "$__lambda_func_cmd" | sed -e "s/\<$__lambda_func_var\>/_-_lambda{_${__lambda_func_replacement}_}lambda_-_/g")"
        __lambda_func_cnt=`expr $__lambda_func_cnt + 1`
    done
    __lambda_func_cmd="$(printf %s "$__lambda_func_cmd" | sed -e "s/_-_lambda{_//g; s/_}lambda_-_//g")"
    unset __lambda_func_vars
    unset __lambda_func_cnt
    unset __lambda_func_var
    unset __lambda_func_replacement
    eval "$__lambda_func_cmd"
    unset __lambda_func_cmd
}
unset __lambda_vars
unset __lambda_varsnum
unset __lambda_cmd
__lambda_func
unset -f __lambda_func'
    }
    #############
    # __set can't be a function because it needs assign $@ in the present context,
    # and alias is not the "right way" for non-interactive scripts either
    __set='eval set --'
    __pickle_arg() { printf '%s' "$1" | sed "s/'/'\\\\''/g"; }
    __wrap_arg() { printf "'%s' \\\\\\n" "$1"; }
    __wrap() { printf '%s\n \n' "$1"; }
    __check_arg() {
        func="$1"
        ca_fail_msg="$2"
        arg="$3"
        if ! $func "$arg"; then
            __warnf 'Failed __check_arg() using function "%s" with arg "%s".\n' "$func" "$arg"
            __warn "$ca_fail_msg"
            return 1
        fi
    }
    __check() {
        func="$1"
        cas_fail_msg="$2"
        shift 2
        for arg; do
            if ! __check_arg "$func" "$cas_fail_msg" "$arg"; then
                __warn "Failed __check()."
                return 1
            fi
        done
    }
    __filter_arg() {
        func="$1"
        fa_fail_msg="$2"
        arg="$3"
        if ! $func "$arg"; then
            __warnf 'Failed __filter_arg() using function "%s" with arg "%s".\n' "$func" "$arg"
            __warn "$fa_fail_msg"
            return 1
        fi
    }
    __apply_arg() {
        __retval=0
        __func="$1"
        __arg="$2"
        if ! eval "$__func \"\$__arg\""; then
            __warnf 'Failed __apply_arg() using function "%s" with arg "%s".\n' "$__func" "$__arg"
            __retval=1
        fi
        unset __func
        unset __arg
        if test 1 = $__retval; then unset __retval; return 1; else unset __retval; return 0; fi
    }
    __apply() {
        __retval=0
        __func="$1"
        shift
        test -n "$__func" || __func="true"
        if ! {
            for __arg; do
                __apply_arg "$__func" "$__arg" || { __retval=1; break; }
            done
            test 0 = $retval
        }; then
            __warn "Failed __apply()."
            __retval=1
        else
            __wrap "$list_string"
        fi
        unset __func
        unset __arg
        if test 1 = $__retval; then unset __retval; return 1; else unset __retval; return 0; fi
    }
    __map() {
        __retval=0
        __func="$1"
        shift
        test -n "$__func" || __func="printf %s"
        if ! __list_string="$(
            for __arg; do
                __arg="$(__apply "$__func" "$__arg")" || { __retval=1; break; }
                __wrap_arg "$(__pickle_arg "$__arg")"
            done
            test 0 = $__retval
        )"; then
            __warn "Failed __map()."
            __retval=1
            unset __arg
        else
            __wrap "$list_string"
        fi
        unset __func
        unset __list_string
        if test 1 = $__retval; then unset __retval; return 1; else unset __retval; return 0; fi
    }
    __pickle() {
        if ! __filter "" "" "$@"; then
            __warn "Failed __pickle()."
            return 1
        fi
    }
    __file_writable() {
        filename="$1"
        fw_fail_msg=
        if test -e "$filename"; then
            if ! test -f "$filename"; then
                fw_fail_msg='"%s" already exists and is not a regular file.'
            else
                if ! test -w "$filename"; then
                    fw_fail_msg='"%s" is not writable.'
                fi
            fi
        else
            file_dirname="$(dirname "$filename")"
            if ! test -d "$file_dirname" || ! test -x "$file_dirname" || ! test -w "$file_dirname"; then
                fw_fail_msg='Unable to create "%s" (inadequate permissions?).'
            fi
        fi
        if test -n "$fw_fail_msg"; then
            __warnf "$fw_fail_msg\n" "$filename"
            __warn "Failed __file_writable()."
            return 1
        fi
    }
    __file_exists_tag() { test -e "$1"; printf '%s' "${1}:$?"; }

#############
#    __reduce() {} #TODO
    __cleanup() {
        __map unset $1
        __map "unset -f" $2
        shift 2
        __map "rm -fR" "$@" 2>/dev/null
    }

    __common_cleanup() {
        __cleanup \
"__scriptname \
__scriptbasename \
__scriptdirname \
PACKAGE_VERSION" \
"__usage_footer \
__usage \
__version \
__source \
__infof \
__info \
__warnf \
__warn \
__sub_die \
__dief \
__die \
__lambda \
__pickle_arg \
__wrap_arg \
__wrap \
__check_arg \
__check \
__filter_arg \
__apply_arg \
__apply \
__map \
__pickle \
__file_writable \
__file_exists_tag"
## TODO:
#__reduce \
#__list_create \
#__list_destroy \
#__list_append \
#__list_prepend \
#__list_insert \
#__list_pop \
#__list_shift \
#__list_splice \
#__list_length \
#__list_iterate \
#__list_slice \
#__list_reverse \
#__list_sort
        unset -f __cleanup
        unset -f __common_cleanup
    }
    __common_sourced=1
fi
